:::::NEXT:::::
	- complete checklist loop / menu
	- show 'quit feedback' for each program
	- make the pomodoro actually be an option, design on whiteboard

	- CODE READING> can I run GCALCLI modeuls? 
	
	- reintegrate Arie's version with Lumocards-One

		
:::::NEXT LVL 2:::::
	

	- integrate all routes
		- remove unnecessary print() from beginning of sub-program's main()
		- setup relevant sub parser arguments
		- do necessary refactors for integrating
		- quit transitions for all sub programs

		
	- pip install -e my project
		- ref 'IMPORTS'
		- setup entry point script
		- clone to 'ARIE'
		- basic .toml file


	**  put tape on my keyboard for better finding of l ctrl and alt.
			
	- json dict updater for all existing...	
		- update json_dicts for existing cards (include 'google calendar info') --> in branch 'calendar_sync_basic'
	- make sure the word calendar / schedule are used in a way that makes sense...
		- mostly calendar unless you need schedule
	- make a function where if you delete a card.txt file, it will then check to delete the json file as well
		- clean up fucntion
	- probably an event should become an object at some point... (currently it's a list)


:::::OUTLINE BIG:::::
	> CODE READING 
	> CALENDAR :: SYNC :: RECURRING :: MENUS :: SHCEDULING ::
	> PACKAGING
		- NEW USERS
		- DISTRIBUTION
		- WINDOWS

	> PRODUCTION CODE:
		- DESIGN PATTERNS
		- HITCHHIKER'S GUIDE TO PYTHON


:::::SCHEDULE / CALENDAR:::::
	- CREATION:
		- user can schedule cards
		- turn summary into card name (how to handle google events with same name? / what if the name later changes? / what if it changes in Lumo?)
		- ask user for card category or default
		- write the card
		- write json data
		- write google json data to sub-section of Lumo json data
		- print summary
		- Timezones!!!! Fuck!!! Hard, but important???

		- propagate default values to calendar page

		- the difference between deleting a lumo calendar card, and unscheduling it, which would:
			- take the card off Google calendar, and put it back into middle focus, etc. 

		- Lumo keeps and updates one year of cards...otherwise it retrieves cards that are online

		- should selecting an event  on the chosen day show a new screen when editing?
			- I think so, but we can do it both ways to see...


	- REPEATING EVENTS:
		
		- a menu in both day view and week view to update a recurring card
		- when offline; repeating cards should be represented by one 'master' card with a RRULE
			- if all events change recurring rules change
			- if future events change, this creates a second 'new' card with a similar name and it's own RRULE set
			- if an individual event changes, this is stored as an exception with 'google calendar exceptions' json section of lumo card
				- maybe there should be another indicator on the lumo json data that is 'has single modded events' with Boolean
			- deleting a single event?? should just be an exception
			- deleting this + following should just be a change to the RRULE
			- delete all is just deleting the card
		- all the shit with repeating events...!
		- if a card is repeating event in GCal or LumoCal, it should have one instance as a .txt file
		- Lumo should be able to mimic all the event updates that Google Cal can do
			- repeat last day of the month, vs. repeat on a given day
	

	- SETTINGS:
		 custom formatting for military vs. regular and for 7:00Pm - 12:00Am to be centered vs. 7:00Pm - 8:00Pm	

	- MENUS / NAVIGATION / SHORTCUTS
		- calendar mode: d[1], w[2], m[3]
		- select day from [a], [b], [c] or [1] [2] (the number of the day)
		- how should I move backward and forward in days? what should be 'loaded'? how/when should loading happen?
		- calendar shortcuts: go to "next week" etc.
		- calendar shortcuts: go to: dec 25
		- go to: 2025
		- go to: dec
		- go to: dec 2026
		- calendar shortcuts: go to 1/25/2022
		- calendar shortcuts: to december

		> time? 8-9 
		> time? 8 1h
		> time? 8 default
		> from week mode: 21, 8p-9p, dinner with Jamie (first part=the day, second part=time, third part=event name)
		> a -> schedule to that day ...
			> what time? 8:30p-
				> confirm 8:00 Am – 9:00 Pm or (8:00 Am – 9:00 Pm?)

		- how would a user make a quick scheduled card like: newcard r dinner with sam, tue @ 8a (blank would be default length of one hour)
		- how would a user make a quick scheduled card like: newcard r dinner with sam, 12/01/2020 @ 8a-9a
		- how would a user make a quick scheduled card like: newcard r dinner with sam, aug 01 @ 8a +2
		
		- standard menu should be one item at a time (try one format at a time for testing)
			-event name? dinner with Sam
			-event start? 8a | 8am | 8:30a | 8 am | 20:00 | 20:31 
			-event end? ( blank=defaul +1 ) | +1=do the math | 9a | etc. 
			-etc...
		- what to ask people about each event when scheduling??? Should it be the full Google Menu?

	- API:
		- is there an issue with the Google API for 'primary' calendars?
		- offline calendar API? (can this be made so that if Google calendar is gone, then there's something else?)
		- can you have more than one calendar added?
		- how to make token / credentials persistent?
		- Note: in Google Calendar, modified single events will show an updated time unique to that event
		- Note: in Google Calendar, if a recurring instance is modified, it will no longer appear in get.instances() by google
		--  make use of icalendar in a refactor?:      
		      -  https://icalendar.readthedocs.io/en/latest/about.html

	- SYNC BASICS:
		- deleting a card from google deletes the card in Lumo
		- deleting a card from Lumo deletes the card in Google

		- how should I handle cases where there is no internet? what is the 'offline' mode
		- flagging cards for update when updating them offline
			- how would I handle 'merge conflicts' i.e. you edit the event when it's offline, and edit google
		-upload / sync manager 
		- Any change to a scheduled card either syncs or is staged for sync via 'flag' system


		- test from sync  non-existing Lumo cards that are google events
		- get all google events for a year
		- get lumo cards that are scheduled
		- compare updated times...
		- sync events in Lumo
		- changes to events in Lumo should sync automatically by default
		- it should be able to retrieve a years worth of events from google, then it can just check for differences to see if events have updated between the calendars...
		- user can toggle events from scheduled to non-scheduled

	FUNCTIONALITY / FEATURES:
		--  at some point accomodate .ics files?
		-- localized times etc. 

	TESTING / EDGE CASES:
		- how the fuck do I test this thoroughly?
		- how do events that start one day and flow into the next work?
		- how does calendar display conflicting?
		- what happens in between weeks of two different months? (does it always start on first?)
			- how does it account for this?

:::::LUMO:::::
	REFACTORS:
		--  try using a @decorator to do loading transitions
		--  consider checking out your use of circular dependencies!!
		--  at some point you should use types in your functions
		--  enum vs. str as input to a function
		--  see if you can have someone look at your code?
		--  difference of 'case' vs. 'elif/if'
		--  look into python generator?? for pomodoro?
		--  unify the variable name for the result of input() i.e. response, rsp, etc. 
		--  what is the indentation setting rule for all programs in Lumo?
		
	ANIMATIONS:
		- get coherent and consistent system / rules
		- when you xsition back from a sub program to main menu, do ... loader transition

	LUMO HOME MENU:
		- at some point chance ALL_MENU and MAIN_MENU to be constructed with zipping letters rather than hardcoding.
		- gracefull inform user if the command line arguments after 'lumo' are unrecognized
		- inform user of options with unrecognized inputs in the home menu

		- implement 'fuzzy' find for command lind args, i.e. 'checklists' or 'routine' should map to 'checklist in parser
	 	- make sure there is something for the :: about :: section in __main__
	 		- print the version info or something | should I have a _version.py file?
	 	- :: tutorial :: section?
		- support parsing actions like typing 'Lumo newcard A mycard' or 'Lumo search blah'
		- if they type in 'lumo' ignore it and just parse the rest
		- have flexible defaults for errors in parsing

		- search 'exit' vs. 'quit'

	 MENUS:
 		- at some point, make sure that the menus give you decent pathways for setting calendar events (make sure refactor works with added folder CARDS_D_CALENDAR)
		- dict comprehensions / print formatting from dicts
		- what about an option for delete menu for multiple cards?
		- "help" menu for all sub-programs like pomodoro help, calendar help, etc. subparser.add_argument "help"

	CARDSRUN:
	    --  When you type 'back' on Near Cards / Cardsrun / Planner it shows the previous card that has moved
		--  should the 'macro menu' have an option to be able to menu jump to recurring cards? (I think so...)
		--  figure out how to format text inside boxes to be left aligned
		--  'BACK' fucntion vs. 'UNDO'

	SEARCH:
		--  can search support multiple terms?
		--  cards should show their location in the menus! i.e. 
			  P PAINTING (NEAR, SCHEDULED)
			  (RECURRING CARD, EVERY 2 DAYS)
			  (CHECKLIST CARD)
			  (MIDDLE FOCUS CARD)
			  (MIDDLE FOCUS CARD, SCHEDULED)
		--  can lumocards have a version where it shows in paren() the location of the found card when it's previewing the card from the 1...2...3... menu?
		--  issue with how after you 'show full' card if you try to edit it, it won't work?
		
	CHECKLIST:
	 	--  move cycler() to checklist; it's in card_utils.py right now
	 	--  what if you have more than 24 checklists?
		--  how does the user edit the essentials and the errands checklist card inside lumo?
			- can this be abstracted so that they can choose if a certain card always gets asked to run?   	
			- same thing for a card that runs each time in the begginning?
		--  option to make a new checklist card from the checklist menu
		--  option to edit essentials card and errands card from checklist menu
		--  do the TODO's on that file
		
	NEWCARD:
		--  should there be an option to make a newcard after making a newcard?
		--  is it possible that the format could be cardname then optional card category
			- could it support leaving off the category so that it prompts user depending on context to add one or not?

	SOUNDS:
		--  cross platform???
		--  spend a few hours one morning going through the playsound python package
		--  is it possible to use part of ffmpeg, ffplay, pyaudio?
	
	 INSTALLATION NEW USERS
		- demo video
		- homebrew?
		- see all the ways the micro can be installed
		- should install be like other programs with ~/.config
		-intro to explain settings
		-explain to users what kinds of cards there are and how they work
		-introduction feature to have user set up caterogires, one at a time
		-intro to set user birthday
		-what if the user wants to change the names of categories? 
		
		- pip install -e ??? / the python video from Real Python
		- requires python
		- user downloads a tar or compressed folder
		- then script installs a vitual environment +
			- pip installs the package to the virtual environment
			- then exports the environment script to /usr/bin
			- then .toml file creates and entry point for the 'Lumo' program that can load all the different lumo fucntions
			- then show a demo video
			- show what settings are available
	
		-should it be installable from pip?

		-how should 'Z_CREDENTIALS' work when uninitilized?

		-ok when they first setup lumo and add credentials it makes a file in Z_CREDENTIALS called 'creds.json'
		- this file is also linked to settings.json
		- note: the user cannot then manually rename the credentials file without issue!
		- I feel like this is still not a robust implementation

		-how will the app handle updates for users?
			-say for a bug or if the json needs to change?

		-how would people set this up for google api?

		-can it ship with 'micro'? it auto load 'micro?' is this possible???

	SETTINGS:
		- users can configue what is in the home 'Lumo' menu
		- should it be able to configure a text editor based on 'settings?'
		- should there be an interface to work with settings?
		- settings feature for updating the names of categories
		- lumo_install.sh should be able to set up a calendar credentials, or guide people

		- checklist settings: can this be abstracted so that they can choose if a certain card always gets asked to run?   	
		- checklist settings: same thing for a card that runs each time in the begginning?



	PAYMENT:
		- if I ask for payment, do I owe other people for what I've used?
		- does an MIT license require payment if I charge for my app that uses a package?
		- do I have the right license?
	  
--  rewrite the alphabetizer_2.py file to work again
--  ensure that minimum for recurring cards settings = 2 days


--  what happens if you name a card with numbers in it?
--  when adding custom steps, make sure to fill in remainder with '...'
	i.e. you add just one custome step, it should auto-fill two more lines of '...'
--  a feature that would check to make sure that all .txt files had the proper format of L_Title
	-so that in case a user renames the card in a file explorer the system can catch it rather than breaking?
	
**  alias vs. cmd in bash scripting
--  make a feature that allows users to display archived cards from search
--  set up some rules to the animations :)

**  can you install python3 to the venv for users who don't have python3?
**  can you install micro?
**  how will users decide on a text editor? how to test it's working? 
**  can another person port this to windows?
**  am I going to add something to /usr/bin/? 
**  what is going to be the simplest way so that people can either open it in terminal or with desktop entry? 
**  currently: lumo is a script in usr/local/bin which can be called with . lumo. This can reference the 'lumo_runtime' which pretty good becuase it gives you one button press to activate...The question is how would I make that script for people with the install

**  basics of bash scripting?
	-can you first check if they have python3 on their system in the bash script
--  set as checklist card should be a menu item for 'modify' menu
--  should locard be able to do 'locard term1 term2'?

--  are recurring cards just repeating events that don't go on a calendar? no, because
	  recurring cards keep showing up until you complete them

--  are there separate versions of lumo that have scheduled cards with Google and locally scheduled?	  
--  understand better the way the recurring and calendar and focused cards relate...
	  -if a near focus card is scheduled, is that different than middle focus?
	  -can a near focus card be in google calendar as repeating event, every day?
	  -can a near focus card be in google calendar as repeating event?


--  have cards retain their order when relooping 'get_remaining_cards'
--  Make 'back' work
--  Make all hotkey word shortcuts work
--  allow locard to work on it's own with addnl args?
--  refactor so that lumo aliases are like 'lumo newcard' etc. 'lumo runcards' so that it's consistent

--  have locard use a dict rather than list indeces...
--  global 'suitcase' is maybe not so smart?

--  implement 'r+' mode when modifying cards, and 'w+' when creating?
--  should paths be relative?

--  what if you want to use the timer while you are using other programs??
--  the logic of the functions in cards run feels like it could be clearer with how many statuses are being passed around

--  should you be able to type 'q' in any menu to quit for example when searching for a term in 'locard' typing 'q' will act as search. Should 'q' be added to negative use responses?

**  try out fzf and see if it works good enough

'CALENDAR' w/ textualize?
'RENAMING' etc. all menus should work or be aware of what people are doing

--  there should be a way in lumocards to display the help menu, i.e. the hotkey words as well as the shortcut letters i.e. --help
--  where else should you be able to type 'help'?
--  feature to schedule viewing middle focus cards per set amount of time

--  feature: non destructive step completion; 
---  "Lumo Night" → is when yu rurecap card "Lumo Night" is when you edit cards to 
---  basics of lumogarden implement scroll from lumocards3 

DISTANT:
	---  support the mouse
	---  feature: separate a step from a list into its own card
	---  fuzzy hotkey matching?
	---  archive steps in place feature to look at non-active, i.e. checkboxes, don't delete steps 
	---  install from folder, or make standalone app
	---  feature to be able to toggle completed steps from being 'active' or 'in focus' and completed for now.
	---  feature for visually impaired, how does lumocards work as a fully sound designed app?


